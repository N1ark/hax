---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: enum-repr
    manifest: enum-repr/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Enum_repr.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

(* TODO: Replace this dummy lib with core lib *)
Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.
(* / dummy lib *)


Definition discriminant_EnumWithRepr_ExplicitDiscr1 : t_u16 :=
  1.

Definition discriminant_EnumWithRepr_ExplicitDiscr2 : t_u16 :=
  5.

Inductive t_EnumWithRepr : Type :=
| EnumWithRepr_ExplicitDiscr1
| EnumWithRepr_ExplicitDiscr2
| EnumWithRepr_ImplicitDiscrEmptyTuple
| EnumWithRepr_ImplicitDiscrEmptyStruct.
Arguments EnumWithRepr_ExplicitDiscr1.
Arguments EnumWithRepr_ExplicitDiscr2.
Arguments EnumWithRepr_ImplicitDiscrEmptyTuple.
Arguments EnumWithRepr_ImplicitDiscrEmptyStruct.

Definition t_EnumWithRepr_cast_to_repr (x : t_EnumWithRepr) : t_u16 :=
  match x with
  | EnumWithRepr_ExplicitDiscr1 =>
    discriminant_EnumWithRepr_ExplicitDiscr1
  | EnumWithRepr_ExplicitDiscr2 =>
    discriminant_EnumWithRepr_ExplicitDiscr2
  | EnumWithRepr_ImplicitDiscrEmptyTuple =>
    t_Add_f_add (discriminant_EnumWithRepr_ExplicitDiscr2) (1)
  | EnumWithRepr_ImplicitDiscrEmptyStruct =>
    t_Add_f_add (discriminant_EnumWithRepr_ExplicitDiscr2) (2)
  end.

(* NotImplementedYet *)

Definition f '(_ : unit) : t_u32 :=
  let v__x := cast (t_Add_f_add (discriminant_EnumWithRepr_ExplicitDiscr2) (0)) in
  t_Add_f_add (cast (t_EnumWithRepr_cast_to_repr (EnumWithRepr_ImplicitDiscrEmptyTuple))) (cast (t_EnumWithRepr_cast_to_repr (EnumWithRepr_ImplicitDiscrEmptyStruct))).

Definition ff__CONST : t_u16 :=
  cast (t_Add_f_add (discriminant_EnumWithRepr_ExplicitDiscr1) (0)).

Definition get_casted_repr (x : t_EnumWithRepr) : t_u64 :=
  cast (t_EnumWithRepr_cast_to_repr (x)).

Definition get_repr (x : t_EnumWithRepr) : t_u16 :=
  t_EnumWithRepr_cast_to_repr (x).
'''
_CoqProject = '''
-R ./ TODO
-arg -w
-arg all

Enum_repr.v'''
