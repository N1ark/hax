---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: conditional-match
    manifest: conditional-match/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 101
stderr = '''
Compiling conditional-match v0.1.0 (WORKSPACE_ROOT/conditional-match)
error[HAX0008]: (reject_MatchGuard) ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }
  --> conditional-match/src/lib.rs:31:9
   |
31 |         Foo { a, .. } if a > 10 => 1,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `conditional-match` (lib) due to previous error'''
[[stdout.diagnostics]]
message = '(reject_MatchGuard) ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }'
spans = ['Span { lo: Loc { line: 31, col: 8 }, hi: Loc { line: 31, col: 36 }, filename: Real(LocalPath("conditional-match/src/lib.rs")) }']

[stdout.files]
"Conditional_match.v" = '''
(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Record t_Foo : Type := {
  f_a : int8;
  f_b : bool;
  f_c : int16;
}.

Definition v_Bar (foo : t_Foo_t) : unit :=
  let _ := match foo with
    | {|
      f_c := c
    |} =>
      (@repr WORDSIZE32 1)
    end : int32 in
  tt.

Definition v_Baz (foo : t_Foo_t) : unit :=
  let _ := failure (reject_MatchGuard) ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }
 (match foo {
        conditional_match::Foo { f_a: a } if core::cmp::PartialOrd::gt(a, 10) => 1,
        conditional_match::Foo { f_b: b } if b => 2,
        _ => 3,
    }) : int32 in
  tt.

Definition v_Foo (_ : unit) : unit :=
  let foo := Build_Foo (f_a := (@repr WORDSIZE8 16)) (f_b := false) (f_c := (@repr WORDSIZE16 9)) : t_Foo_t in
  let bar := Build_Foo (f_c := (@repr WORDSIZE16 14)) : t_Foo_t in
  tt.
'''
