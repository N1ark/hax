---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: literals
    manifest: literals/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = '''
Compiling literals v0.1.0 (WORKSPACE_ROOT/literals)
    Finished dev [unoptimized + debuginfo] target(s) in XXs'''

[stdout]
diagnostics = []

[stdout.files]
"Literals.v" = '''
(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Definition casts (x8 : int8) (x16 : int16) (x32 : int32) (x64 : int64) (xs : uint_size) : unit :=
  let (_ : int64) := ((((cast x8).+(cast x16)).+(cast x32)).+x64).+(cast xs) : int64 in
  let (_ : int32) := ((((cast x8).+(cast x16)).+x32).+(cast x64)).+(cast xs) : int32 in
  let (_ : int16) := ((((cast x8).+x16).+(cast x32)).+(cast x64)).+(cast xs) : int16 in
  let (_ : int8) := (((x8.+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int8 in
  let (_ : int64) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int64 in
  let (_ : int32) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int32 in
  let (_ : int16) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int16 in
  let (_ : int8) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int8 in
  tt.

Definition numeric (_ : unit) : unit :=
  let (_ : uint_size) := (@repr WORDSIZE32 123) : uint_size in
  let (_ : uint_size) := (@repr WORDSIZE32 42) : uint_size in
  let (_ : uint_size) := (@repr WORDSIZE32 42) : uint_size in
  let (_ : int32) := (@repr WORDSIZE32 42) : int32 in
  let (_ : int128) := (@repr WORDSIZE128 22222222222222222222) : int128 in
  tt.

Definition panic_with_msg (_ : unit) : unit :=
  never_to_any (panic_fmt (impl_2__new_const (unsize (array_from_list [with msg])))).

Record t_Foo : Type := {
  f_field : int8;
}.

Definition v_CONSTANT : t_Foo_t :=
  Build_Foo (f_field := (@repr WORDSIZE8 3)).

Definition patterns (_ : unit) : unit :=
  let _ := match (@repr WORDSIZE8 1) with
    | num_ (@repr WORDSIZE8 2) =>
      tt
    | _ =>
      tt
    end : unit in
  let _ := match (hello,((@repr WORDSIZE32 123),array_from_list [a;
            b])) with
    | '(num_ hello,(num_ (@repr WORDSIZE32 123),_todo)) =>
      tt
    | _ =>
      tt
    end : unit in
  let _ := match Build_Foo (f_field := (@repr WORDSIZE8 4)) with
    | {|
      f_field := num_ (@repr WORDSIZE8 3)
    |} =>
      tt
    | _ =>
      tt
    end : unit in
  tt.
'''
