---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: cyclic-modules
    manifest: cyclic-modules/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Cyclic_modules.B.fst" = '''
module Cyclic_modules.B
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Rec_bundle_507852343 {g as g}
'''
"Cyclic_modules.C.fst" = '''
module Cyclic_modules.C
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let i (_: Prims.unit) : Prims.unit = ()
'''
"Cyclic_modules.D.fst" = '''
module Cyclic_modules.D
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.E.Rec_bundle_868781766 {d1 as d1}

include Cyclic_modules.E.Rec_bundle_868781766 {d2 as d2}
'''
"Cyclic_modules.De.fst" = '''
module Cyclic_modules.De
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.E.Rec_bundle_868781766 {de1 as de1}
'''
"Cyclic_modules.E.Rec_bundle_868781766.fst" = '''
module Cyclic_modules.E.Rec_bundle_868781766
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let d1 (_: Prims.unit) : Prims.unit = ()

let e1 (_: Prims.unit) : Prims.unit = d1 ()

let de1 (_: Prims.unit) : Prims.unit = e1 ()

let d2 (_: Prims.unit) : Prims.unit = de1 ()
'''
"Cyclic_modules.E.fst" = '''
module Cyclic_modules.E
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.E.Rec_bundle_868781766 {e1 as e1}
'''
"Cyclic_modules.Enums_a.fst" = '''
module Cyclic_modules.Enums_a
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {t_T240131830 as t_T}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T240131830_A as T_A}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T240131830_B as T_B}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T240131830_C as T_C}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T240131830_D as T_D}
'''
"Cyclic_modules.Enums_b.Rec_bundle_573885887.fst" = '''
module Cyclic_modules.Enums_b.Rec_bundle_573885887
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_T366415196 =
  | T366415196_A : t_T366415196
  | T366415196_B : t_T366415196
  | T366415196_C : Alloc.Vec.t_Vec t_T240131830 Alloc.Alloc.t_Global -> t_T366415196

and t_U =
  | U_A : t_U
  | U_B : t_U
  | U_C : Alloc.Vec.t_Vec t_T240131830 Alloc.Alloc.t_Global -> t_U

and t_T240131830 =
  | T240131830_A : t_T240131830
  | T240131830_B : t_T240131830
  | T240131830_C : Alloc.Vec.t_Vec t_U Alloc.Alloc.t_Global -> t_T240131830
  | T240131830_D : Alloc.Vec.t_Vec t_T366415196 Alloc.Alloc.t_Global -> t_T240131830
'''
"Cyclic_modules.Enums_b.fst" = '''
module Cyclic_modules.Enums_b
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {t_T366415196 as t_T}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T366415196_A as T_A}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T366415196_B as T_B}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {T366415196_C as T_C}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {t_U as t_U}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {U_A as U_A}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {U_B as U_B}

include Cyclic_modules.Enums_b.Rec_bundle_573885887 {U_C as U_C}

let f (_: Prims.unit) : t_T = T_A <: t_T
'''
"Cyclic_modules.Rec.fst" = '''
module Cyclic_modules.Rec
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_T =
  | T_t1 : t_T
  | T_t2 : t_T

let t_T_cast_to_repr (x: t_T) : isize =
  match x with
  | T_t1  -> isz 0
  | T_t2  -> isz 1

let rec hf (x: t_T) : t_T =
  match x with
  | T_t1  -> hf (T_t2 <: t_T)
  | T_t2  -> x

let rec g1 (x: t_T) : t_T =
  match x with
  | T_t1  -> g2 x
  | T_t2  -> T_t1 <: t_T

and g2 (x: t_T) : t_T =
  match x with
  | T_t1  -> g1 x
  | T_t2  -> hf x
'''
"Cyclic_modules.Rec1_same_name.fst" = '''
module Cyclic_modules.Rec1_same_name
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Rec2_same_name.Rec_bundle_784146069 {f533409751 as f}
'''
"Cyclic_modules.Rec2_same_name.Rec_bundle_784146069.fst" = '''
module Cyclic_modules.Rec2_same_name.Rec_bundle_784146069
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let rec f533409751 (x: i32) : i32 = f91805216 x

and f91805216 (x: i32) : i32 = if x >. 0l then f533409751 (x -! 1l <: i32) else 0l
'''
"Cyclic_modules.Rec2_same_name.fst" = '''
module Cyclic_modules.Rec2_same_name
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Rec2_same_name.Rec_bundle_784146069 {f91805216 as f}
'''
"Cyclic_modules.Rec_bundle_507852343.fst" = '''
module Cyclic_modules.Rec_bundle_507852343
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let f (_: Prims.unit) : Prims.unit = ()

let g (_: Prims.unit) : Prims.unit = f ()

let h (_: Prims.unit) : Prims.unit =
  let _:Prims.unit = g () in
  Cyclic_modules.C.i ()
'''
"Cyclic_modules.Typ_a.fst" = '''
module Cyclic_modules.Typ_a
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {t_T as t_T}

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {T_T as T_T}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {t_TRec as t_TRec}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {TRec_T as TRec_T}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {TRec_Empty as TRec_Empty}
'''
"Cyclic_modules.Typ_b.Rec_bundle_445945170.fst" = '''
module Cyclic_modules.Typ_b.Rec_bundle_445945170
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_TRec =
  | TRec_T : t_T1Rec -> t_TRec
  | TRec_Empty : t_TRec

and t_T1Rec = | T1Rec_T1 : Alloc.Boxed.t_Box t_T2Rec Alloc.Alloc.t_Global -> t_T1Rec

and t_T2Rec = | T2Rec_T2 : t_TRec -> t_T2Rec
'''
"Cyclic_modules.Typ_b.Rec_bundle_684725220.fst" = '''
module Cyclic_modules.Typ_b.Rec_bundle_684725220
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_T1 = | T1_T1 : t_T1

type t_T = | T_T : t_T1 -> t_T

type t_T2 = | T2_T2 : t_T -> t_T2
'''
"Cyclic_modules.Typ_b.fst" = '''
module Cyclic_modules.Typ_b
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {t_T1 as t_T1}

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {T1_T1 as T1_T1}

let t_T1_cast_to_repr (x: t_T1) : isize = match x with | T1_T1  -> isz 0

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {t_T2 as t_T2}

include Cyclic_modules.Typ_b.Rec_bundle_684725220 {T2_T2 as T2_T2}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {t_T1Rec as t_T1Rec}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {T1Rec_T1 as T1Rec_T1}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {t_T2Rec as t_T2Rec}

include Cyclic_modules.Typ_b.Rec_bundle_445945170 {T2Rec_T2 as T2Rec_T2}
'''
"Cyclic_modules.fst" = '''
module Cyclic_modules
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

include Cyclic_modules.Rec_bundle_507852343 {f as f}

include Cyclic_modules.Rec_bundle_507852343 {h as h}

let h2 (_: Prims.unit) : Prims.unit = Cyclic_modules.C.i ()
'''
