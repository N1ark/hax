---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: reordering
    manifest: reordering/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Reordering.Mut_rec.fst" = '''
module Reordering.Mut_rec
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let rec f (_: Prims.unit) : Prims.unit = g ()

and g (_: Prims.unit) : Prims.unit = f ()

let ff_2_ (_: Prims.unit) : Prims.unit = f ()
'''
"Reordering.fst" = '''
module Reordering
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Foo =
  | Foo_A : t_Foo
  | Foo_B : t_Foo

type t_Bar = | Bar : t_Foo -> t_Bar

let t_Foo_cast_to_repr (x: t_Foo) : isize =
  match x <: t_Foo with
  | Foo_A  -> isz 0
  | Foo_B  -> isz 1

let f (_: u32) : t_Foo = Foo_A <: t_Foo

let g (_: Prims.unit) : t_Bar = Bar (f 32ul) <: t_Bar

let no_dependency_1_ (_: Prims.unit) : Prims.unit = ()

let no_dependency_2_ (_: Prims.unit) : Prims.unit = ()
'''
