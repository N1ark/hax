(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.

Record t_foo (v_T : Type) (v_N : t_usize) `{t_Sized (v_T)} : Type :=
  {
    foo_f_bar : v_T;
    foo_f_baz : t_Array (v_T) (v_N);
    foo_f_qux : t_u8;
  }.
Arguments Build_t_foo (_) (_) {_}.
Arguments foo_f_bar {_} {_} {_}.
Arguments foo_f_baz {_} {_} {_}.
Arguments foo_f_qux {_} {_} {_}.
#[export] Instance settable_t_foo `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)} : Settable _ :=
  settable! (Build_t_foo v_T v_N) <foo_f_bar; foo_f_baz; foo_f_qux>.

Record t_test__Color : Type :=
  {
    test__Color_0 : t_u8;
    test__Color_1 : t_u8;
    test__Color_2 : t_u8;
  }.
Arguments Build_t_test__Color.
Arguments test__Color_0.
Arguments test__Color_1.
Arguments test__Color_2.
#[export] Instance settable_t_test__Color : Settable _ :=
  settable! (Build_t_test__Color) <test__Color_0; test__Color_1; test__Color_2>.
Notation "'test__Color'" := Build_t_test__Color.

Record t_test__Cookie : Type :=
  {
  }.
Arguments Build_t_test__Cookie.
#[export]
Notation "'test__Cookie'" := Build_t_test__Cookie.

Record t_test__CookieA : Type :=
  {
  }.
Arguments Build_t_test__CookieA.
#[export]
Notation "'test__CookieA'" := Build_t_test__CookieA.

Record t_test__Gamma : Type :=
  {
  }.
Arguments Build_t_test__Gamma.
#[export]
Notation "'test__Gamma'" := Build_t_test__Gamma.

Record t_test__PointA : Type :=
  {
    test__PointA_f_x : t_i32;
    test__PointA_f_y : t_i32;
  }.
Arguments Build_t_test__PointA.
Arguments test__PointA_f_x.
Arguments test__PointA_f_y.
#[export] Instance settable_t_test__PointA : Settable _ :=
  settable! (Build_t_test__PointA) <test__PointA_f_x; test__PointA_f_y>.

Record t_test__PointB : Type :=
  {
    test__PointB_0 : t_i32;
    test__PointB_1 : t_i32;
  }.
Arguments Build_t_test__PointB.
Arguments test__PointB_0.
Arguments test__PointB_1.
#[export] Instance settable_t_test__PointB : Settable _ :=
  settable! (Build_t_test__PointB) <test__PointB_0; test__PointB_1>.
Notation "'test__PointB'" := Build_t_test__PointB.

Record t_test__Position : Type :=
  {
    test__Position_0 : t_i32;
    test__Position_1 : t_i32;
    test__Position_2 : t_i32;
  }.
Arguments Build_t_test__Position.
Arguments test__Position_0.
Arguments test__Position_1.
Arguments test__Position_2.
#[export] Instance settable_t_test__Position : Settable _ :=
  settable! (Build_t_test__Position) <test__Position_0; test__Position_1; test__Position_2>.
Notation "'test__Position'" := Build_t_test__Position.

Definition test__Cookie : t_test__Cookie :=
  Build_t_test__Cookie.

Definition test '(_ : unit) : unit :=
  let a := Build_t_test__Gamma in
  let b := Build_t_test__Gamma in
  let _ := tt in
  let _ := Build_t_test__Position (0) (0) (0) in
  let c := Build_t_test__Position in
  let pos := test__Position (8) (6) (7) in
  let _ := tt in
  let c1 := Build_t_test__Color (0) (0) (0) in
  let c2 := Build_t_test__Color (255) (127) (0) in
  let c3 := Build_t_test__Color (0) in
  let _ := tt in
  let p := Build_t_test__PointA (10) (11) in
  let px : t_i32 := test__PointA_f_x p in
  let p2 := Build_t_test__PointA (10) (11) in
  let p2 := p2 <|test__PointA_f_x := 10 |> in
  let p2 := p2 <|test__PointA_f_y := 14 |> in
  let _ := tt in
  let p := Build_t_test__PointB (10) (11) in
  let px : t_i32 := match p with
  | Build_t_test__PointB x _ =>
    x
  end in
  let _ := tt in
  let c := [Build_t_test__CookieA; Build_t_test__CookieA; Build_t_test__CookieA; Build_t_test__CookieA] in
  let _ := tt in
  let c := [test__Cookie; Build_t_test__Cookie; test__Cookie; Build_t_test__Cookie] in
  tt.
