(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

From Core Require Import Core.

Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Instance Clone_any : forall {t_A}, t_Clone t_A := {t_Clone_f_clone := fun x => x}.

Record Foo_Qux_record (v_T : Type) (v_N : t_usize) `{t_Sized (v_T)} : Type :=
  {
    Qux_f_x : v_T;
    Qux_f_y : t_Array (v_T) (v_N);
    Qux_f_z : t_u8;
  }.
Arguments Build_Foo_Qux_record (_) (_) {_}.
Arguments Qux_f_x {_} {_} {_}.
Arguments Qux_f_y {_} {_} {_}.
Arguments Qux_f_z {_} {_} {_}.
#[export] Instance settable_Foo_Qux_record `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)} : Settable _ :=
  settable! (Build_Foo_Qux_record v_T v_N) <Qux_f_x; Qux_f_y; Qux_f_z>.
Inductive t_Foo `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)} : Type :=
| Foo_Bar : t_u8 -> _
| Foo_Baz
| Foo_Qux : Foo_Qux_record  v_T v_N -> _.

Inductive t_test__AnimalA : Type :=
| test__AnimalA_Dog
| test__AnimalA_Cat.

Definition t_test__AnimalA_cast_to_repr (x : t_test__AnimalA) : t_isize :=
  match x with
  | test__AnimalA_Dog =>
    0
  | test__AnimalA_Cat =>
    1
  end.

Record test__AnimalB_Cat_record : Type :=
  {
    Cat_f_name : t_String;
    Cat_f_weight : float;
  }.
Arguments Build_test__AnimalB_Cat_record.
Arguments Cat_f_name.
Arguments Cat_f_weight.
#[export] Instance settable_test__AnimalB_Cat_record : Settable _ :=
  settable! (Build_test__AnimalB_Cat_record) <Cat_f_name; Cat_f_weight>.
Inductive t_test__AnimalB : Type :=
| test__AnimalB_Dog : t_String -> float -> _
| test__AnimalB_Cat : test__AnimalB_Cat_record  -> _.

Record test__Enum_Struct_record : Type :=
  {
    Struct_f_a : t_u8;
    Struct_f_b : t_u16;
  }.
Arguments Build_test__Enum_Struct_record.
Arguments Struct_f_a.
Arguments Struct_f_b.
#[export] Instance settable_test__Enum_Struct_record : Settable _ :=
  settable! (Build_test__Enum_Struct_record) <Struct_f_a; Struct_f_b>.
Inductive t_test__Enum : Type :=
| test__Enum_Unit
| test__Enum_Tuple : t_u16 -> _
| test__Enum_Struct : test__Enum_Struct_record  -> _.

Record test__Examples_StructLike_record : Type :=
  {
    StructLike_f_value : t_i32;
  }.
Arguments Build_test__Examples_StructLike_record.
Arguments StructLike_f_value.
#[export] Instance settable_test__Examples_StructLike_record : Settable _ :=
  settable! (Build_test__Examples_StructLike_record) <StructLike_f_value>.
Inductive t_test__Examples : Type :=
| test__Examples_UnitLike
| test__Examples_TupleLike : t_i32 -> _
| test__Examples_StructLike : test__Examples_StructLike_record  -> _.

Definition test '(_ : unit) : unit :=
  let a : t_test__AnimalA := test__AnimalA_Dog in
  let a := test__AnimalA_Cat in
  let _ := tt in
  let a : t_test__AnimalB := test__AnimalB_Dog (ToString_f_to_string ("Cocoa"%string)) (37.2%float) in
  let a := test__AnimalB_Cat {| Cat_f_name := (ToString_f_to_string ("Spotty"%string)); Cat_f_weight := (2.7%float) |} in
  let _ := tt in
  let x := test__Examples_UnitLike in
  let x := test__Examples_UnitLike in
  let y := test__Examples_TupleLike (123) in
  let y := test__Examples_TupleLike (123) in
  let z := test__Examples_StructLike {| StructLike_f_value := (123) |} in
  let _ := tt in
  tt.
